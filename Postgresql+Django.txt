How To Use PostgreSQL with your Django Application on Ubuntu 14.04


Introduction
Django - это гибкая среда для быстрого создания приложений Python. По умолчанию приложения Django настроены для хранения данных в легком файле
базы данных SQLite. Хотя это хорошо работает при некоторых нагрузках, более традиционная СУБД может повысить производительность в производстве.
В этом руководстве мы продемонстрируем, как установить и настроить PostgreSQL для использования с вашими приложениями Django. Мы установим
необходимое программное обеспечение, создадим учетные данные для нашего приложения, а затем запустим и настроим новый проект Django для
использования этого бэкэнда.


Предпосылки
Для начала вам понадобится чистый экземпляр сервера Ubuntu 14.04 с настроенным пользователем без полномочий root. Пользователь без полномочий
root должен быть настроен с привилегиями sudo. Узнайте, как настроить это, следуя нашему первоначальному руководству по настройке сервера.
Когда вы будете готовы продолжить, продолжайте читать.


Установка компонентов из репозиториев Ubuntu
Нашим первым шагом будет установка всех частей, которые нам нужны из репозиториев. Мы будем устанавливать pip, менеджер пакетов Python,
для установки и управления нашими компонентами Python. Мы также установим программное обеспечение базы данных и соответствующие библиотеки,
необходимые для взаимодействия с ними.

Следующие команды apt получат нужные вам пакеты:

sudo apt-get update
sudo apt-get install python-pip python-dev libpq-dev postgresql postgresql-contrib

С установкой в сторону, мы можем перейти к созданию нашей базы данных и пользователя базы данных.


Создание базы данных и пользователя базы данных
По умолчанию Postgres использует схему аутентификации, называемую «одноранговой аутентификацией» для локальных подключений.
По сути, это означает, что если имя пользователя операционной системы пользователя совпадает с действительным именем пользователя Postgres,
этот пользователь может входить в систему без дополнительной проверки подлинности.
Во время установки Postgres, пользователь операционной системы с именем postgres был создан, чтобы соответствовать postgres административному
пользователю PostgreSQL. Нам нужно изменить этого пользователя для выполнения административных задач:

sudo su - postgres

Теперь вы должны быть в сеансе оболочки для пользователя Postgres. Вход в сеанс Postgres, набрав:

psql

Во-первых, мы создадим базу данных для нашего проекта Django. Каждый проект должен иметь свою собственную базу данных,
изолированных по соображениям безопасности. Мы будем называть нашу MyProject базы данных в данном руководстве, но это всегда лучше выбрать
что-то более описательный:

CREATE DATABASE myproject;

Не забудьте завершить все команды в командной строке SQL с помощью точки с запятой.
Затем мы создадим пользователя базы данных, который мы будем использовать для подключения и взаимодействия с базой данных.
Установите пароль на что-нибудь надежное и надежное:

CREATE USER myprojectuser WITH PASSWORD 'password';

Впоследствии мы изменим некоторые параметры соединения для только что созданного пользователя. Это ускорит работу с базой данных,
так что не нужно будет запрашивать правильные значения и устанавливать каждый раз, когда будет установлено соединение.
Мы устанавливаем стандартную кодировку UTF-8, которую ожидает Django. Мы также устанавливаем схему изоляции транзакции по умолчанию,
чтобы «читать зафиксировано», которая блокирует чтение из незафиксированных транзакций. Наконец, мы устанавливаем часовой пояс.
По умолчанию в наших проектах Django будет использоваться UTC:

ALTER ROLE myprojectuser SET client_encoding TO 'utf8';
ALTER ROLE myprojectuser SET default_transaction_isolation TO 'read committed';
ALTER ROLE myprojectuser SET timezone TO 'UTC';

Теперь все, что нам нужно сделать, это предоставить нашим пользователям права доступа к базе данных, которую мы создали:

GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser;

Закройте запрос SQL, чтобы вернуться к сеансу оболочки пользователя postgres:

\q

Выход из сеанса оболочки пользователя Postgres, чтобы вернуться к сессии оболочки вашего обычного пользователя:

exit


Install Django within a Virtual Environment
Теперь, когда наша база данных настроена, мы можем установить Django. Для большей гибкости мы установим Django
и все его зависимости в виртуальной среде Python.

Вы можете получить пакет virtualenv, который позволяет вам создавать эти среды, набрав:

sudo pip install virtualenv

Создайте каталог для хранения вашего проекта Django. После этого перейдите в каталог:

mkdir ~ / myproject
cd ~ / myproject

Мы можем создать виртуальную среду для хранения наших требований к проекту Python в Django, набрав:

virtualenv myprojectenv

Это позволит установить локальную копию Python и pip в каталог myprojectenv внутри каталога вашего проекта.
Перед установкой приложений в виртуальной среде нам необходимо активировать их. Вы можете сделать это, набрав:

source myprojectenv/bin/activate

Ваше приглашение изменится, показывая, что вы теперь работаете в виртуальной среде. Он будет выглядеть примерно так

(myprojectenv) user @ host: ~ / myproject $.

Когда ваша виртуальная среда активна, вы можете установить Django с pip. Мы также установим пакет psycopg2,
который позволит нам использовать базу данных, которую мы настроили:

pip install django psycopg2

Теперь мы можем запустить проект Django в нашем каталоге myproject. Это создаст дочерний каталог с тем же именем для хранения
самого кода и создаст управляющий скрипт в текущем каталоге. Обязательно добавьте точку в конце команды, чтобы она была настроена правильно:

django-admin.py startproject myproject.


Настройка параметров базы данных Django

Теперь, когда у нас есть проект, мы должны настроить его, чтобы использовать базу данных, который мы создали.
Откройте главное Django настроек проекта файл, расположенный в директории проекта ребенок:

nano ~/myproject/myproject/settings.py

В нижней части файла, вы увидите раздел DATABASES который выглядит следующим образом:

. . .
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
. . .

Это в настоящее время настроен на использование SQLite в качестве базы данных. Нам нужно изменить это так, чтобы наша база данных PostgreSQL
вместо него используется.

Во-первых, менять двигатель таким образом, что он использует postgresql_psycopg2 бэкэнда вместо sqlite3 бэкэнд. Для NAME,
используйте имя вашей базы данных (MyProject в нашем примере). Нам также необходимо добавить учетные данные для входа. Нам нужны имя пользователя,
пароль и хост для подключения. Мы добавим и оставьте пустым опцию порта, так что выбран по умолчанию:

. . .
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'myproject',
        'USER': 'myprojectuser',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '',
    }
}
. . .

Когда вы закончите, сохраните и закройте файл.


Миграция базы данных и тестирование проекта
Теперь, когда настройки Django настроены, мы можем перенести наши структуры данных в нашу базу данных и протестировать сервер.

Мы можем начать с создания и применения миграций к нашей базе данных. Поскольку у нас пока нет фактических данных, это просто
установит исходную структуру базы данных:

cd ~/myproject
python manage.py makemigrations
python manage.py migrate

После создания структуры базы данных мы можем создать учетную запись администратора, набрав:

python manage.py createsuperuser

Вам будет предложено выбрать имя пользователя, указать адрес электронной почты и выбрать и подтвердить пароль для учетной записи.
Когда у вас будет настроенная учетная запись администратора, вы можете проверить правильность работы базы данных, запустив сервер разработки Django:

python manage.py runserver 0.0.0.0:8000

В своем веб-браузере зайдите на доменное имя вашего сервера или IP-адрес, а затем: 8000, чтобы перейти на основную страницу Django по умолчанию:

http://server_domain_or_IP:8000

Вы должны увидеть страницу индекса по умолчанию:

Добавьте / admin в конец URL, и вы сможете получить доступ к экрану входа в интерфейс администратора:

Вход для администратора Django

Введите имя пользователя и пароль, которые вы только что создали, с помощью команды createsuperuser. Затем вы попадете в интерфейс администратора:

Интерфейс администратора Django

Когда вы закончите расследование, вы можете остановить сервер разработки, нажав CTRL-C в окне терминала.
Получив доступ к интерфейсу администратора, мы подтвердили, что наша база данных хранит информацию о своей учетной записи пользователя
и что к ней можно получить надлежащий доступ.

Вывод
В этом руководстве мы продемонстрировали, как установить и настроить PostgreSQL в качестве базы данных для проекта Django.
Хотя SQLite может легко справляться с нагрузкой во время разработки и использования легкого производства, большинство проектов
выигрывают от внедрения более полнофункциональной СУБД.