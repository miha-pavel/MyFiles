============================================================================================
										Адреса
										------
...
===========================================================================================
===========================================================================================
	СОЗДАНИЕ ОТДЕЛЬНОЙ ВЕТКИ, И ЗАЛИВКА В GIT
	-----------------------------------------
1. Перед началом работы вы создаете ветку:
	-git checkout -b <branch_name>
2. Делаем изменения
3. Потом добавляете файлы
	-git add .
4. Потом делаете коммит
	-git commit -a -m "Message here"
5. А потом делаете пуш в репозиторий
	-git push origin <branch_name>
Последняя команда создаст ветку в репозитори, если ее еще там нет
===========================================================================================
===========================================================================================
	СОЗДАНИЕ ЛОКАЛЬНОГО РЕПОЗИТАРИЯ (КЛОНИРОВАНИЕ УДОЛЕННОГО РЕПОЗИТАРИЯ)
	---------------------------------------------------------------------
mkdir projects					-
cd projects						-
mkdir alur && cd alur			-
git init						- Инициализирован пустой репозиторий Git в /home/pasha/projects/alur/.git/
									Эта команда создает в текущем каталоге новый подкаталог с именем .git
									содержащий все необходимые файлы репозитория — основу репозитория Git.
									На этом этапе ваш проект еще не находится под версионным контролем.
------
Если вы желаете получить копию существующего репозитория Git, например, проекта, в
котором вы хотите поучаствовать, то вам нужна команда git clone.
Клонирование репозитория осуществляется командой git clone [url]. Например,
	`git clone [url]`
===========================================================================================
===========================================================================================
git add <name.rb>				- добовляем файл в подверсионный контроль
git add .						- добовляем все распознаные изменения
git status						- проверяем статус работы файлов под версионным контролем (отслеживаемые)
									и нет (неотслеживаемые).
git diff						- показывает все изменения только те, что еще не проиндексированы
git diff --cached				- Если вы хотите посмотреть, что вы проиндексировали и что войдет в следующий коммит
git diff --staged				-  -//-
git commit						- фиксируем (комитим) изменения
------------------------------------------------
Удаление файла из Git (cnh 24)
rm Readme1.md					- удоляем файл
git rm Readme1.md				- удоляем файл из Git, из списка индексированых (отсежываемых)
git rm grit.gemspec -f			- 
git rm --cached <name.txt>		- удалить файл из индекса, оставив его при этом в вашем рабочем каталоге
----------------------------------------------------------------------------------------------
Переименнование файла (стр 24)
git mv <name1.md> <name21.md>	- переименование файла из <name1.md> в <name21.md>
----------------------------------------------------------------------------------------------
	ПРОСМОТР ИСТОРИИ КОМИТОВ (СТР 26)
	------------------------
git log							- просмотр истории комитов
git log -p -2					- Показывает дельту (РАЗНИЦУ/diff), привнесенную каждым коммитом.
									-2 ограничит вывод до 2-х последних записей
git log --since=2.weeks			- выдаёт список коммитов, сделанных за последние две недели

------------------------------------------------------------------------
git remote add origin [url]			- клонирование и привязка проекта на винчестере с проэктом на 
										удоленном репозитории
									
git remote add [сокращение] [url]	- добавить новый удалённый Git-репозиторий под именем-сокращением,
										к которому будет проще обращаться (стр 35)
git remote							- Чтобы просмотреть, какие удалённые серверы у вас уже настроены (стр 35)
	origin — это имя по умолчанию, которое Git присваивает серверу, с которого вы склонировали
git remote -v						- Чтобы посмотреть, какому URL соответствует сокращённое имя в Git
git fetch origin					- извлекает все наработки, отправленные на этот сервер после того,
										как вы склонировали его
git pull origin master				- извлекает (fetch) данные с сервера, с которого вы изначально склонировали,
										и автоматически пытается слить (merge) их с кодом,
										над которым вы в данный момент работаете
git push origin master				- отправить вашу ветку master на сервер origin (повторимся, что клонирование,
										как правило, настраивает оба этих имени автоматически)
										
git checkout -b branch_name		- Переключено на новую ветку «branch_name»

git checkout master				- Переключаемся на ветку мастер

git checkout settings.py		- Замена файла
===========================================================================================
===========================================================================================
	УСТАНОВКА GIT НА КОМП
	---------------------
Подключаемся к репозитарию
	`sudo add-apt-repository ppa:git-core/ppa`
	`sudo apt-get update`
установить, если ещё нет
	`sudo apt-get install git`
проверяем версию
	`git --version`
если уже установлен, то обновить
	`sudo apt-get install --only-upgrade git`
проверяем версию
	`git --version`
идентифицировать себя указав имя пользователя и адрес электронной почты.
Git использует имя пользователя и Email при каждом коммите (задавать их обязательно).
	`git config --global user.name "Your Name"`
	`git config --global user.email "youremail@domain.com"`
посмотреть установленные параметры
	`git config --list`
		user.name=Your Name
		user.email=youremail@domain.com
-------------------------------------------------------------------------------
отредактировать его вручную если это необходимо с помощью текстового редактора:
	`sudo nano ~/.gitconfig`
		[user]
		name = Your Name
		email = youremail@domain.com
Здесь можно установить много других параметров, но именно эти два самые важные
============================================================================================
============================================================================================
	СОЗДАНИЕ НОВОГО РЕПОЗИТАРИЯ НА GITHUB
	-------------------------------------
Cоздаем на GITHUB репозитарий
Создаем папку на компе - локальный репозитарий (пример)
mkdir PCProjects
Заходим в него
сd PCProjects
Инициализируем ГИТ
git init
Смотрим на какой ветке мы, и что надо отправить на удаленный репозитарий
git status
Добовляем
git add README.md
Комитим
git commit -m "first commit"
Отсылаем
git remote add origin https://github.com/miha-pavel/PycharmProjects1.git
git push -u origin master
============================================================================================
============================================================================================
	Отправка на GITHUB
	------------------
git remote add origin https://github.com/miha-pavel/PycharmProjects1.git
git push -u origin master
============================================================================================
============================================================================================
	Переносим комиты с ветки1 на ветку2
	-----------------------------------
Смотрим на какой ветки мы находимся 
git status
ветки1
Смотри последние комиты и копируем номер комита который нужно перенести
git log
Переходим на ветку куда надо перенести комит
git checkout ветка2
Переносим комит с ветки1 на ветку2
git cherry-pick -x номер_комита_c7a
Проверяем на какой ветке находимся
git status
Проверяем пернесение комита
git log
Возвращаемся на ветку1
git checkout ветка1
Удаляем комит на ветке1
git reset --hard номер_комита_c7a

