k										*ТЕСТИРОВАНИЕ*
										**************
										
============================================================================================
										Адреса
										------

http://coverage.readthedocs.io/en/coverage-4.3.4/source.html
https://habrahabr.ru/post/121162/
https://habrahabr.ru/post/122156/
http://great-world.ru/kody-otvetov-servera-i-oshibki-http-200-301-404-302-500-503-550/ (STATUS_CODE)
============================================================================================
-Установка "coverage" для проверки покрытия тестами проэкта
	pip install coverage
--------------------------------------------------------------------------------------------
							Покрытие кода (code coverage)
							-----------------------------
Покрытие кода — это метрика, показывающая, какой объем исходного кода был протестирован
относительно всего объема полезного исходного кода в приложении.
Низкое покрытие кода указывает на отсутствие тестов.

Для измерения покрытия кода на питоне существует coverage.py. Гугл помнит много попыток
подружить coverage.py и Django, есть даже тикет #4501 (ему четыре года).

-Запускаем проверку на выполнение
	coverage run --source='.' --omit=*/venv/*  manage.py test accounts
	coverage html

-Открываем проэкт находим папку
	"htmlcov"
	
-Заходим в папку

-Находим файл 
	"index.html"
	
-Открываем его в браузере

-Открываеться список файлов проекта

-Нажимаем на любой из файлов и видим выделенное красным участки кода,
 которые необходимо обложить ТЕСТАМИ
============================================================================================
============================================================================================
							Вызов тестирования
							------------------
-Тестируем одну функцию
	./manage.py test   --keepdb
	./manage.py test manager  --keepdb												(manager-аппликуха)
	./manage.py test manager.tests  --keepdb										(manager.tests-в аппликухе запускаеться модуль tests)
	./manage.py test manager.tests.PurseAdminTest  --keepdb							(manager.tests.PurseAdminTest-в аппликухе запускаеться модуль tests, а далее класс тестов)
	./manage.py test manager.tests.PurseAdminTest.test_main_send_image  --keepdb	(manager.tests.PurseAdminTest.test_main_send_image-в аппликухе запускаеться модуль tests, а далее класс тестов, и только один тест)
--------------------------------------------------------------------------------------------
-Тест проэкта
	./manage.py test manager shop --keepdb
	
				**********
				*--keepdb*
				**********
Опция --keepdb позволяет сохранить базу данных между запусками тестов.
Это позволяет пропустить этапы создания и удаления базы данных,
что позволяет ускорить выполнение тестов, особенно для большого количества тестов.
Если тестовая база данных не существует, она будет создана при первом запуске и использоваться при последующих.
Все невыполненные миграции будут применены к тестовой базе данных перед запуском тестов.
============================================================================================
============================================================================================
							STATUS_CODE пояснения
							---------------------
200 - все прошло успешно
		Может быть случай что успешно но плохо высвечиваеться если во вьюшке есть "render"->"return render(request, 'register.html', {'form': form})",
		это хорошо что высвечивается например форма, но это не значит что была выполнена запись в базу данных
		необходимо проверять запись была или нет "self.assertNotEqual(before + 1, CustomUser.objects.count())"
302 - перенаправление на другую страницу.
		В случае успешной записи открываеться другая страница
		 if newuser:
            		auth.login(request, newuser)
        		return redirect(reverse('login'))
============================================================================================
============================================================================================
							setUp, setUpClass
							-----------------
Обьясни пожалуйста как тогда понимать работу setUpClass
	она вызывается, в отличии от setUp, один раз - когда запускается класс
	внутри класса у тебя могут быть десятки тестов и на каждый из десятков будет вызыван setUp
	но вызов setUpClass произойдет только 1 раз - в самом начале.
	один раз - когда запускается класс
	Каждый раз когда ты вызываешь тест, то происходит такая цепочка:
	Вызов конструктора класса -> вызов setUpClass -> вызов обхода тестов -> НА КАЖДЫЙ ТЕСТ вызов setUp -> непосредственно вызов каждого теста
Так а нафига такое делать?
	производительность
	данные, которые мы не меняем, но нужны везде - setUpClass
	данные, которые мы меняем, но тоже нужны везде - setUp
Эти два метода стандартные зарезервированные, они используються только в тестах, или еще где?
	єто методі в тестах джанго
	
	
				


